// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ReferralDrop extends ethereum.Event {
  get params(): ReferralDrop__Params {
    return new ReferralDrop__Params(this);
  }
}

export class ReferralDrop__Params {
  _event: ReferralDrop;

  constructor(event: ReferralDrop) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to2(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get value2(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get _who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UnlockedAll extends ethereum.Event {
  get params(): UnlockedAll__Params {
    return new UnlockedAll__Params(this);
  }
}

export class UnlockedAll__Params {
  _event: UnlockedAll;

  constructor(event: UnlockedAll) {
    this._event = event;
  }

  get _who(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UnlockedIndex extends ethereum.Event {
  get params(): UnlockedIndex__Params {
    return new UnlockedIndex__Params(this);
  }
}

export class UnlockedIndex__Params {
  _event: UnlockedIndex;

  constructor(event: UnlockedIndex) {
    this._event = event;
  }

  get _who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Stopped extends ethereum.Event {
  get params(): Stopped__Params {
    return new Stopped__Params(this);
  }
}

export class Stopped__Params {
  _event: Stopped;

  constructor(event: Stopped) {
    this._event = event;
  }
}

export class Started extends ethereum.Event {
  get params(): Started__Params {
    return new Started__Params(this);
  }
}

export class Started__Params {
  _event: Started;

  constructor(event: Started) {
    this._event = event;
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Allowed extends ethereum.Event {
  get params(): Allowed__Params {
    return new Allowed__Params(this);
  }
}

export class Allowed__Params {
  _event: Allowed;

  constructor(event: Allowed) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RemoveAllowed extends ethereum.Event {
  get params(): RemoveAllowed__Params {
    return new RemoveAllowed__Params(this);
  }
}

export class RemoveAllowed__Params {
  _event: RemoveAllowed;

  constructor(event: RemoveAllowed) {
    this._event = event;
  }

  get _address(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EGG__lockupResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EGG extends ethereum.SmartContract {
  static bind(address: Address): EGG {
    return new EGG("EGG", address);
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralDrop(
    _to1: Address,
    _value1: BigInt,
    _to2: Address,
    _value2: BigInt,
    _sale: Address,
    _fee: BigInt
  ): boolean {
    let result = super.call(
      "referralDrop",
      "referralDrop(address,uint256,address,uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_to1),
        ethereum.Value.fromUnsignedBigInt(_value1),
        ethereum.Value.fromAddress(_to2),
        ethereum.Value.fromUnsignedBigInt(_value2),
        ethereum.Value.fromAddress(_sale),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );

    return result[0].toBoolean();
  }

  try_referralDrop(
    _to1: Address,
    _value1: BigInt,
    _to2: Address,
    _value2: BigInt,
    _sale: Address,
    _fee: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "referralDrop",
      "referralDrop(address,uint256,address,uint256,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_to1),
        ethereum.Value.fromUnsignedBigInt(_value1),
        ethereum.Value.fromAddress(_to2),
        ethereum.Value.fromUnsignedBigInt(_value2),
        ethereum.Value.fromAddress(_sale),
        ethereum.Value.fromUnsignedBigInt(_fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStopped(): boolean {
    let result = super.call("isStopped", "isStopped():(bool)", []);

    return result[0].toBoolean();
  }

  try_isStopped(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStopped", "isStopped():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  lockedBalanceOf(_who: Address): BigInt {
    let result = super.call(
      "lockedBalanceOf",
      "lockedBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_who)]
    );

    return result[0].toBigInt();
  }

  try_lockedBalanceOf(_who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedBalanceOf",
      "lockedBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(_who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeAllowed(_target: Address): boolean {
    let result = super.call("removeAllowed", "removeAllowed(address):(bool)", [
      ethereum.Value.fromAddress(_target)
    ]);

    return result[0].toBoolean();
  }

  try_removeAllowed(_target: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeAllowed",
      "removeAllowed(address):(bool)",
      [ethereum.Value.fromAddress(_target)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_who: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_who)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlock(_who: Address, _index: BigInt): boolean {
    let result = super.call("unlock", "unlock(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_who),
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBoolean();
  }

  try_unlock(_who: Address, _index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("unlock", "unlock(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_who),
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isLocked(_who: Address, _value: BigInt): boolean {
    let result = super.call("isLocked", "isLocked(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_who),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_isLocked(_who: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLocked", "isLocked(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_who),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAllowed(): boolean {
    let result = super.call("isAllowed", "isAllowed():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAllowed", "isAllowed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvals(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "approvals",
      "approvals(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_approvals(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "approvals",
      "approvals(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockup(param0: Address, param1: BigInt): EGG__lockupResult {
    let result = super.call(
      "lockup",
      "lockup(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new EGG__lockupResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_lockup(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<EGG__lockupResult> {
    let result = super.tryCall(
      "lockup",
      "lockup(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EGG__lockupResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unlockAll(_who: Address): boolean {
    let result = super.call("unlockAll", "unlockAll(address):(bool)", [
      ethereum.Value.fromAddress(_who)
    ]);

    return result[0].toBoolean();
  }

  try_unlockAll(_who: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("unlockAll", "unlockAll(address):(bool)", [
      ethereum.Value.fromAddress(_who)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferWithLock(_to: Address, _value: BigInt, _time: BigInt): boolean {
    let result = super.call(
      "transferWithLock",
      "transferWithLock(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferWithLock(
    _to: Address,
    _value: BigInt,
    _time: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferWithLock",
      "transferWithLock(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromUnsignedBigInt(_time)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allow(_target: Address): boolean {
    let result = super.call("allow", "allow(address):(bool)", [
      ethereum.Value.fromAddress(_target)
    ]);

    return result[0].toBoolean();
  }

  try_allow(_target: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("allow", "allow(address):(bool)", [
      ethereum.Value.fromAddress(_target)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class StopCall extends ethereum.Call {
  get inputs(): StopCall__Inputs {
    return new StopCall__Inputs(this);
  }

  get outputs(): StopCall__Outputs {
    return new StopCall__Outputs(this);
  }
}

export class StopCall__Inputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class StopCall__Outputs {
  _call: StopCall;

  constructor(call: StopCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ReferralDropCall extends ethereum.Call {
  get inputs(): ReferralDropCall__Inputs {
    return new ReferralDropCall__Inputs(this);
  }

  get outputs(): ReferralDropCall__Outputs {
    return new ReferralDropCall__Outputs(this);
  }
}

export class ReferralDropCall__Inputs {
  _call: ReferralDropCall;

  constructor(call: ReferralDropCall) {
    this._call = call;
  }

  get _to1(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _value2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _sale(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ReferralDropCall__Outputs {
  _call: ReferralDropCall;

  constructor(call: ReferralDropCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class RemoveAllowedCall extends ethereum.Call {
  get inputs(): RemoveAllowedCall__Inputs {
    return new RemoveAllowedCall__Inputs(this);
  }

  get outputs(): RemoveAllowedCall__Outputs {
    return new RemoveAllowedCall__Outputs(this);
  }
}

export class RemoveAllowedCall__Inputs {
  _call: RemoveAllowedCall;

  constructor(call: RemoveAllowedCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAllowedCall__Outputs {
  _call: RemoveAllowedCall;

  constructor(call: RemoveAllowedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get _who(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ProposeOwnerCall extends ethereum.Call {
  get inputs(): ProposeOwnerCall__Inputs {
    return new ProposeOwnerCall__Inputs(this);
  }

  get outputs(): ProposeOwnerCall__Outputs {
    return new ProposeOwnerCall__Outputs(this);
  }
}

export class ProposeOwnerCall__Inputs {
  _call: ProposeOwnerCall;

  constructor(call: ProposeOwnerCall) {
    this._call = call;
  }

  get _proposedOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeOwnerCall__Outputs {
  _call: ProposeOwnerCall;

  constructor(call: ProposeOwnerCall) {
    this._call = call;
  }
}

export class StartCall extends ethereum.Call {
  get inputs(): StartCall__Inputs {
    return new StartCall__Inputs(this);
  }

  get outputs(): StartCall__Outputs {
    return new StartCall__Outputs(this);
  }
}

export class StartCall__Inputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class StartCall__Outputs {
  _call: StartCall;

  constructor(call: StartCall) {
    this._call = call;
  }
}

export class UnlockAllCall extends ethereum.Call {
  get inputs(): UnlockAllCall__Inputs {
    return new UnlockAllCall__Inputs(this);
  }

  get outputs(): UnlockAllCall__Outputs {
    return new UnlockAllCall__Outputs(this);
  }
}

export class UnlockAllCall__Inputs {
  _call: UnlockAllCall;

  constructor(call: UnlockAllCall) {
    this._call = call;
  }

  get _who(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnlockAllCall__Outputs {
  _call: UnlockAllCall;

  constructor(call: UnlockAllCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferWithLockCall extends ethereum.Call {
  get inputs(): TransferWithLockCall__Inputs {
    return new TransferWithLockCall__Inputs(this);
  }

  get outputs(): TransferWithLockCall__Outputs {
    return new TransferWithLockCall__Outputs(this);
  }
}

export class TransferWithLockCall__Inputs {
  _call: TransferWithLockCall;

  constructor(call: TransferWithLockCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _time(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferWithLockCall__Outputs {
  _call: TransferWithLockCall;

  constructor(call: TransferWithLockCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AllowCall extends ethereum.Call {
  get inputs(): AllowCall__Inputs {
    return new AllowCall__Inputs(this);
  }

  get outputs(): AllowCall__Outputs {
    return new AllowCall__Outputs(this);
  }
}

export class AllowCall__Inputs {
  _call: AllowCall;

  constructor(call: AllowCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AllowCall__Outputs {
  _call: AllowCall;

  constructor(call: AllowCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
